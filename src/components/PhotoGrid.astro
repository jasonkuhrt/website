---
import type { Photo } from '../data/photographing/types'
import PhotoCell from './PhotoCell.astro'

interface Props {
  photos: Photo[]
}

const { photos } = Astro.props
---

<div class="photo-grid">
  <div id="photo-grid-container" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-px">
    {
      photos.map((photo) => (
        <div
          class="photo-item"
          data-photo-id={photo.id}
          data-photo-type={photo.type}
          data-media-count={photo.media.length}
          data-caption={photo.caption || ''}
          data-date={photo.date}
        >
          {/* Store media data for client-side expansion */}
          {photo.type === 'series' && (
            <script
              is:inline
              type="application/json"
              data-series-media={photo.id}
              set:html={JSON.stringify(photo.media)}
            />
          )}

          {photo.type === 'series' ? (
            // Series - expandable
            <button type="button" class="series-toggle block w-full text-left" data-photo-id={photo.id}>
              <PhotoCell photo={photo} />
            </button>
          ) : (
            // Single photo or video - not expandable
            <PhotoCell photo={photo} />
          )}
        </div>
      ))
    }
  </div>
</div>

<script>
  // Handle series expansion/collapse in grid flow
  function initPhotoGrid() {
    const container = document.getElementById('photo-grid-container')
    if (!container) return

    const toggleButtons = document.querySelectorAll('.series-toggle')

    toggleButtons.forEach((button) => {
      button.addEventListener('click', (e) => {
        // Don't toggle if clicking on video or its controls
        const target = e.target as HTMLElement
        if (target && (target.tagName === 'VIDEO' || target.closest('video'))) {
          return
        }

        e.preventDefault()
        const photoId = button.getAttribute('data-photo-id')
        if (!photoId) return

        const photoItem = button.closest('.photo-item') as any
        if (!photoItem) return

        // Check if already expanded
        const existingExpanded = container.querySelectorAll(`[data-expanded-from="${photoId}"]`)
        if (existingExpanded.length > 0) {
          // Collapse: clear dimming effect first
          if (photoItem._hoverLeave) {
            photoItem._hoverLeave()
          }
          // Remove all expanded items
          existingExpanded.forEach((el) => el.remove())
          photoItem.removeAttribute('data-expanded')
          // Remove hover listeners from series icon
          if (photoItem._seriesIcon && photoItem._hoverEnter && photoItem._hoverLeave) {
            photoItem._seriesIcon.removeEventListener('mouseenter', photoItem._hoverEnter)
            photoItem._seriesIcon.removeEventListener('mouseleave', photoItem._hoverLeave)
          }
          return
        }

        // Expand: get media data
        const mediaScript = photoItem.querySelector(`script[data-series-media="${photoId}"]`)
        if (!mediaScript) return

        const media = JSON.parse(mediaScript.textContent || '[]')
        const caption = photoItem.getAttribute('data-caption')
        const date = photoItem.getAttribute('data-date')

        // Mark as expanded
        photoItem.setAttribute('data-expanded', 'true')

        // Create grid cells for remaining media items (skip first as it's already shown)
        const remainingMedia = media.slice(1)
        const fragment = document.createDocumentFragment()

        remainingMedia.forEach((mediaItem: any, index: number) => {
          const cell = document.createElement('div')
          cell.className = 'photo-item aspect-square overflow-hidden bg-gray-100 dark:bg-gray-800'
          cell.setAttribute('data-expanded-from', photoId)

          if (mediaItem.type === 'image') {
            const img = document.createElement('img')
            img.src = mediaItem.path
            img.alt = `${caption || 'Photo'} - ${index + 2}`
            img.className = 'block h-full w-full object-cover'
            cell.appendChild(img)
          } else {
            const video = document.createElement('video')
            video.src = mediaItem.path
            video.className = 'block h-full w-full object-cover'
            video.controls = true
            cell.appendChild(video)
          }

          fragment.appendChild(cell)
        })

        // Add caption/date cell if caption exists
        if (caption) {
          const captionCell = document.createElement('div')
          captionCell.className = 'photo-item bg-gray-50 dark:bg-gray-900 p-4 flex flex-col justify-center'
          captionCell.setAttribute('data-expanded-from', photoId)

          const captionText = document.createElement('p')
          captionText.className = 'text-sm text-gray-700 dark:text-gray-300 mb-2'
          captionText.textContent = caption

          const dateText = document.createElement('p')
          dateText.className = 'text-xs text-gray-500 dark:text-gray-400'
          dateText.textContent = new Date(date || '').toLocaleDateString()

          captionCell.appendChild(captionText)
          captionCell.appendChild(dateText)
          fragment.appendChild(captionCell)
        }

        // Add hover effect to dim other photos when hovering over expanded series
        const hoverEnter = () => {
          const allPhotoItems = container.querySelectorAll('.photo-item')
          allPhotoItems.forEach((item) => {
            const htmlItem = item as HTMLElement
            // Don't dim the original photo or any of its expanded items
            const isOriginal = item === photoItem
            const isExpanded = item.getAttribute('data-expanded-from') === photoId

            if (!isOriginal && !isExpanded) {
              htmlItem.style.opacity = '0.1'
              htmlItem.style.transition = 'opacity 0.2s'
            }
          })
        }

        const hoverLeave = () => {
          const allPhotoItems = container.querySelectorAll('.photo-item')
          allPhotoItems.forEach((item) => {
            const htmlItem = item as HTMLElement
            htmlItem.style.opacity = '1'
          })
        }

        // Insert all new cells after the current photo item
        let insertAfter = photoItem
        const children = Array.from(fragment.children)
        children.forEach((child) => {
          insertAfter.after(child)
          insertAfter = child
        })

        // Add hover listeners only to the series icon
        const seriesIcon = photoItem.querySelector('.series-icon')
        if (seriesIcon) {
          seriesIcon.addEventListener('mouseenter', hoverEnter)
          seriesIcon.addEventListener('mouseleave', hoverLeave)
          seriesIcon.addEventListener('click', hoverEnter)

          // Store references for cleanup
          photoItem._hoverEnter = hoverEnter
          photoItem._hoverLeave = hoverLeave
          photoItem._seriesIcon = seriesIcon

          // Apply dimming effect immediately on expansion
          hoverEnter()
        }
      })
    })
  }

  // Initialize on page load
  initPhotoGrid()

  // Re-initialize after view transitions
  document.addEventListener('astro:page-load', initPhotoGrid)
</script>

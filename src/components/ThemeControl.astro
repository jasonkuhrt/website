---
import { Icon } from 'astro-icon/components'
---

<button
  id="themeToggle"
  class="absolute top-5 right-5 p-2 rounded-lg transition-all hover:bg-gray-200 dark:hover:bg-gray-800"
  aria-label="Toggle theme"
  title="Toggle theme (Light/Dark/System)"
>
  <Icon name="carbon:sun" class="theme-icon theme-icon-light text-xl" />
  <Icon name="carbon:asleep" class="theme-icon theme-icon-dark text-xl" />
  <Icon name="carbon:screen" class="theme-icon theme-icon-system text-xl" />
</button>

<style>
  #themeToggle {
    opacity: 0.6;
  }
  #themeToggle:hover {
    opacity: 1;
  }

  .theme-icon {
    display: none;
  }

  /* Show only the active icon based on current mode */
  :global(.light) .theme-icon-light,
  :global(.dark) .theme-icon-dark,
  :global(.system) .theme-icon-system {
    display: block;
  }

  /* Smooth transition for icon changes */
  .theme-icon {
    transition: opacity 0.2s ease;
    color: #666;
  }

  /* Ensure visibility in dark mode */
  :global(.dark) .theme-icon {
    color: #999;
  }
</style>

<script is:inline>
  const getSystemTheme = () => (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')

  const getStoredThemeMode = () => {
    if (typeof localStorage !== 'undefined') {
      return localStorage.getItem('themeMode') || 'system'
    }
    return 'system'
  }

  const applyTheme = (mode) => {
    document.documentElement.classList.remove('dark', 'light', 'system')

    if (mode === 'system') {
      document.documentElement.classList.add('system')
      document.documentElement.classList.add(getSystemTheme())
    } else {
      document.documentElement.classList.add(mode)
    }

    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('themeMode', mode)
    }
  }

  const cycleTheme = () => {
    const currentMode = getStoredThemeMode()
    const modes = ['light', 'dark', 'system']
    const currentIndex = modes.indexOf(currentMode)
    const nextIndex = (currentIndex + 1) % modes.length
    const nextMode = modes[nextIndex]

    applyTheme(nextMode)
  }

  const initButton = () => {
    const button = document.getElementById('themeToggle')
    if (button && !button.hasAttribute('data-initialized')) {
      button.addEventListener('click', cycleTheme)
      button.setAttribute('data-initialized', 'true')
    }
  }

  // Initialize button on load
  initButton()

  // Re-initialize button after view transitions
  document.addEventListener('astro:page-load', initButton)

  // Listen for system theme changes when in system mode
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    if (getStoredThemeMode() === 'system') {
      applyTheme('system')
    }
  })
</script>
